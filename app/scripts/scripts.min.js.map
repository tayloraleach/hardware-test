{"version":3,"sources":["script.js"],"names":["elem","document","documentElement","getElementById","addEventListener","e","elm","createElement","style","position","id","height","width","top","left","background","target","body","appendChild","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","key","querySelector","keyCode","element","classList","toggle","pressed","displayMask","remove","interval","cpuButton","SignTool","_classCallCheck","this","initVars","initEvents","innerHTML","color","setInterval","console","log","iterations","multiplier","primes","i","candidate","Math","random","isPrime","c","sqrt","push","calculatePrimes","clearInterval","_createClass","value","canvas","ctx","getContext","isMouseClicked","isMouseInCanvas","prevX","currX","prevY","currY","_this","onMouseMove","onMouseDown","onMouseUp","onMouseOut","onMouseEnter","updateCurrentPosition","draw","clientX","offsetLeft","clientY","offsetTop","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath"],"mappings":"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","file":"scripts.min.js","sourcesContent":["(function hardwareTest() {\n  var elem = document.documentElement;\n\n  const openFullscreen = () => {\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) {\n      /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) {\n      /* Chrome, Safari and Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) {\n      /* IE/Edge */\n      elem.msRequestFullscreen();\n    }\n  };\n\n  const closeFullscreen = () => {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      /* Firefox */\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      /* Chrome, Safari and Opera */\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      /* IE/Edge */\n      document.msExitFullscreen();\n    }\n  };\n\n  const display = document.getElementById(\"display-controls\");\n\n  display.addEventListener(\"click\", e => {\n    const elm = document.createElement(\"div\");\n    elm.style.position = \"absolute\";\n    elm.id = \"display-mask\";\n    elm.style.height = \"100%\";\n    elm.style.width = \"100%\";\n    elm.style.top = \"0\";\n    elm.style.left = \"0\";\n    elm.style.background = e.target.id;\n    document.body.appendChild(elm);\n    openFullscreen();\n  });\n\n  const pressed = element => element.classList.toggle(\"pressedkey\");\n\n  document.addEventListener(\"keyup\", e => {\n    // If a valid key, toggle style\n    const key = document.querySelector(`[key=\"${e.keyCode}\"]`);\n    if (key) {\n      pressed(key);\n    }\n\n    // Closes display mask if its open\n    const displayMask = document.getElementById(\"display-mask\");\n    if (displayMask) {\n      displayMask.remove();\n    }\n  });\n\n  let interval;\n  const iterations = 50;\n  const multiplier = 1000000000;\n  const cpuButton = document.querySelector(\".cpu-button\");\n\n  // CPU strain function\n  const calculatePrimes = (iterations, multiplier) => {\n    var primes = [];\n    for (var i = 0; i < iterations; i++) {\n      var candidate = i * (multiplier * Math.random());\n      var isPrime = true;\n      for (var c = 2; c <= Math.sqrt(candidate); ++c) {\n        if (candidate % c === 0) {\n          // not prime\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        primes.push(candidate);\n      }\n    }\n    return primes;\n  };\n\n  cpuButton.addEventListener(\"click\", e => {\n    if (e.target.innerHTML == \"Run\") {\n      e.target.innerHTML =\n        'STOP <div class=\"lds-spinner\" style=\"pointer-events: none;\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>';\n      e.target.style.background = \"red\";\n      e.target.style.color = \"white\";\n      interval = setInterval(() => {\n        console.log(\"running...\");\n        calculatePrimes(iterations, multiplier);\n      }, 10);\n    } else {\n      e.target.innerHTML = \"Run\";\n      e.target.style.background = \"white\";\n      e.target.style.color = \"#cc0000\";\n      clearInterval(interval);\n    }\n  });\n\n  // Trackpad\n  class SignTool {\n    constructor() {\n      this.initVars();\n      this.initEvents();\n    }\n\n    initVars() {\n      this.canvas = document.querySelector(\".trackpad-test canvas\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.isMouseClicked = false;\n      this.isMouseInCanvas = false;\n      this.prevX = 0;\n      this.currX = 0;\n      this.prevY = 0;\n      this.currY = 0;\n    }\n\n    initEvents() {\n      const canvas = document.querySelector(\".trackpad-test canvas\");\n      canvas.addEventListener(\"mousemove\", e => this.onMouseMove(e));\n      canvas.addEventListener(\"mousedown\", e => this.onMouseDown(e));\n      canvas.addEventListener(\"mouseup\", () => this.onMouseUp());\n      canvas.addEventListener(\"mouseout\", () => this.onMouseOut());\n      canvas.addEventListener(\"mouseenter\", e => this.onMouseEnter(e));\n    }\n\n    onMouseDown(e) {\n      this.isMouseClicked = true;\n      this.updateCurrentPosition(e);\n    }\n\n    onMouseUp() {\n      this.isMouseClicked = false;\n    }\n\n    onMouseEnter(e) {\n      this.isMouseInCanvas = true;\n      this.updateCurrentPosition(e);\n    }\n\n    onMouseOut() {\n      this.isMouseInCanvas = false;\n    }\n\n    onMouseMove(e) {\n      if (this.isMouseClicked && this.isMouseInCanvas) {\n        this.updateCurrentPosition(e);\n        this.draw();\n      }\n    }\n\n    updateCurrentPosition(e) {\n      this.prevX = this.currX;\n      this.prevY = this.currY;\n      this.currX = e.clientX - this.canvas.offsetLeft;\n      this.currY = e.clientY - this.canvas.offsetTop;\n    }\n\n    draw() {\n      console.log(this.prevX);\n      console.log(this.prevY);\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.prevX, this.prevY);\n      this.ctx.lineTo(this.currX, this.currY);\n      this.ctx.strokeStyle = \"black\";\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      this.ctx.closePath();\n    }\n  }\n\n  var canvass = new SignTool();\n})();\n"]}